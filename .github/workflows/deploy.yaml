name: Deploy

on:
  push:
    branches:
      - gitops
# on:
#   push:
#     branches: [gitops]
#     paths: ['/']
#   workflow_dispatch:

permissions:
  id-token: write
  contents: read


jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.changes.outputs.changed-services }}
      matrix: ${{ steps.changes.outputs.matrix }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed services
        id: changes
        run: |
          SERVICES=("ui" "catalog" "cart" "checkout" "orders")
          CHANGED_SERVICES=()
          
          echo "🔍 Checking for changes in services..."
          
          # Check for changes in each service
          for service in "${SERVICES[@]}"; do
            if git diff --name-only HEAD~1 HEAD | grep -q "^argocd-app/src/$service/" || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              CHANGED_SERVICES+=("$service")
              echo "✅ Changes detected in: $service"
            else
              echo "⏭️ No changes in: $service"
            fi
          done
          
          # If manual trigger, build all services
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "🔄 Manual trigger - building all services"
            CHANGED_SERVICES=("ui" "catalog" "cart" "checkout" "orders")
          fi
          
          # Check if we have any changes
          if [ ${#CHANGED_SERVICES[@]} -eq 0 ]; then
            echo "❌ No services changed"
            echo "has-changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Create matrix for changed services only
          MATRIX_JSON="["
          for i in "${!CHANGED_SERVICES[@]}"; do
            if [ $i -gt 0 ]; then
              MATRIX_JSON+=","
            fi
            MATRIX_JSON+="\"${CHANGED_SERVICES[$i]}\""
          done
          MATRIX_JSON+="]"
          
          echo "changed-services=${CHANGED_SERVICES[*]}" >> $GITHUB_OUTPUT
          echo "matrix={\"service\":$MATRIX_JSON}" >> $GITHUB_OUTPUT
          echo "has-changes=true" >> $GITHUB_OUTPUT
          
          echo "📊 Services to build: ${CHANGED_SERVICES[*]}"
          echo "📊 Generated matrix: {\"service\":$MATRIX_JSON}"
          
  ecr_workflow:
    name: ecr_workflow
    steps:
    - name: Configure AWS Credentials for ap-south-1 region audience
      uses: aws-actions/configure-aws-credentials@v4
      with:
          audience: sts.amazonaws.com
          aws-region: ap-south-1
          role-to-assume: ${{ secrets.IAMROLEARN }}

    - name: Test aws connectivity
      run: |
        aws sts get-caller-identity

  deploy:
    name: Deploy ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    permissions:
      contents: write
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push ${{ matrix.service }}
        run: |
          SERVICE="${{ matrix.service }}"
          TAG="$(echo ${{ github.sha }} | cut -c1-7)"
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
          ECR_REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/retail-store-${SERVICE}"
          
          echo "🔨 Building ${SERVICE}:${TAG}"
          
          # Create ECR repo if it doesn't exist
          aws ecr describe-repositories --repository-names "retail-store-${SERVICE}" 2>/dev/null || \
          aws ecr create-repository --repository-name "retail-store-${SERVICE}" \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256
          
          # Build and push
          docker build -t "${ECR_REPO}:${TAG}" -t "${ECR_REPO}:latest" "src/${SERVICE}/"
          docker push "${ECR_REPO}:${TAG}"
          docker push "${ECR_REPO}:latest"
          
          echo "✅ Pushed ${ECR_REPO}:${TAG}"
          echo "ECR_REPO=${ECR_REPO}" >> $GITHUB_ENV
  